// 1da5ecb713ee971c2130af298efef13c Generated file. Do not edit.
// File created by WPP compiler version 10.0.19041
// from template km-default.tpl

#pragma once

// template km-header.tpl

#ifdef  WPP_THIS_FILE
// included twice
#       define  WPP_ALREADY_INCLUDED
#       undef   WPP_THIS_FILE
#endif  // #ifdef WPP_THIS_FILE

#define WPP_THIS_FILE dyn_cpp

#ifndef WPP_ALREADY_INCLUDED

#define WPP_KERNEL_MODE 

#include <evntrace.h>
#include <stddef.h>
#include <stdarg.h>
#include <wmistr.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef
LONG
(*PFN_WPPQUERYTRACEINFORMATION) (
    IN  TRACE_INFORMATION_CLASS TraceInformationClass,
    OUT PVOID  TraceInformation,
    IN  ULONG  TraceInformationLength,
    OUT PULONG RequiredLength OPTIONAL,
    IN  PVOID  Buffer OPTIONAL
    );

typedef
LONG
(*PFN_WPPTRACEMESSAGE)(
    IN ULONG64  LoggerHandle,
    IN ULONG   MessageFlags,
    IN LPCGUID MessageGuid,
    IN USHORT  MessageNumber,
    IN ...
    );

typedef enum _WPP_TRACE_API_SUITE {
    WppTraceDisabledSuite,
    WppTraceWin2K,
    WppTraceWinXP,
    WppTraceTraceLH,
    WppTraceServer08,
    WppTraceMaxSuite
} WPP_TRACE_API_SUITE;

_IRQL_requires_same_
typedef
VOID
(NTAPI *PETW_CLASSIC_CALLBACK)(
    _In_ LPCGUID Guid,
    _In_ UCHAR ControlCode,
    _In_ PVOID EnableContext,
    _In_opt_ PVOID CallbackContext
    );

_IRQL_requires_same_
typedef
NTSTATUS
NTKERNELAPI
(FN_ETWREGISTERCLASSICPROVIDER)(
    _In_ LPCGUID ProviderGuid,
    _In_ ULONG Type,
    _In_ PETW_CLASSIC_CALLBACK EnableCallback,
    _In_opt_ PVOID CallbackContext,
    _Out_ PREGHANDLE RegHandle
    );

typedef FN_ETWREGISTERCLASSICPROVIDER *PFN_ETWREGISTERCLASSICPROVIDER;

typedef
BOOLEAN
NTKERNELAPI
(FN_WPPGETVERSION)(
    _Out_opt_ PULONG MajorVersion,
    _Out_opt_ PULONG MinorVersion,
    _Out_opt_ PULONG BuildNumber,
    _Out_opt_ PUNICODE_STRING CSDVersion
    );

typedef FN_WPPGETVERSION *PFN_WPPGETVERSION;

typedef
NTSTATUS
NTKERNELAPI
(FN_ETWUNREGISTER)(
    _In_ REGHANDLE RegHandle
    );

typedef FN_ETWUNREGISTER *PFN_ETWUNREGISTER;

#pragma prefast(suppress:__WARNING_ENCODE_GLOBAL_FUNCTION_POINTER, "this pointer can not be encoded");
__declspec(selectany) PFN_WPPQUERYTRACEINFORMATION   pfnWppQueryTraceInformation = NULL;

#pragma prefast(suppress:__WARNING_ENCODE_GLOBAL_FUNCTION_POINTER, "this pointer can not be encoded");
__declspec(selectany) PFN_WPPTRACEMESSAGE            pfnWppTraceMessage = NULL;

#pragma prefast(suppress:__WARNING_ENCODE_GLOBAL_FUNCTION_POINTER, "this pointer can not be encoded");
__declspec(selectany) PFN_ETWUNREGISTER              pfnEtwUnregister = NULL;

#pragma prefast(suppress:__WARNING_ENCODE_GLOBAL_FUNCTION_POINTER, "this pointer can not be encoded");
__declspec(selectany) PFN_ETWREGISTERCLASSICPROVIDER pfnEtwRegisterClassicProvider = NULL;

#pragma prefast(suppress:__WARNING_ENCODE_GLOBAL_FUNCTION_POINTER, "this pointer can not be encoded");
__declspec(selectany) PFN_WPPGETVERSION              pfnWppGetVersion = NULL;


__declspec(selectany) WPP_TRACE_API_SUITE            WPPTraceSuite = WppTraceDisabledSuite;

#if !defined(_NTRTL_)
#if !defined(_NTHAL_)
// fake RTL_TIME_ZONE_INFORMATION //
typedef int RTL_TIME_ZONE_INFORMATION;
#endif
#define _WMIKM_
#endif

#ifndef WPP_TRACE
#define WPP_TRACE pfnWppTraceMessage
#endif

#if ENABLE_WPP_RECORDER

#define _ENABLE_WPP_RECORDER TRUE

#ifndef WPP_RECORDER
#define WPP_RECORDER WppAutoLogTrace
#endif

//
// This setting is only applicable when IFR is enabled.
// Setting this to 1 will allow a WPP trace session to 
// capture trace messages as usual i.e it will require the
// user to provide WPP trace ENABLED and LOGGER macro. If 
// this is set to 0 by default the IFR trace filter also
// affects which trace messages land in the WPP trace session.
//
#if !defined(ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER)
#define ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER 0
#endif

#if !defined(WPP_RECORDER_LEVEL_FLAGS_ARGS)
#define WPP_RECORDER_LEVEL_FLAGS_ARGS(lvl, flags) WPP_CONTROL(WPP_BIT_ ## flags).AutoLogContext, lvl, WPP_BIT_ ## flags
#define WPP_RECORDER_LEVEL_FLAGS_FILTER(lvl,flags) (lvl < TRACE_LEVEL_VERBOSE || WPP_CONTROL(WPP_BIT_ ## flags).AutoLogVerboseEnabled)
#endif


#if !defined(WPP_RECORDER_LEVEL_ARGS)
#define WPP_RECORDER_LEVEL_ARGS(lvl) WPP_CONTROL(WPP_BIT_ ## lvl).AutoLogContext, 0, WPP_BIT_ ## lvl
#define WPP_RECORDER_LEVEL_FILTER(lvl) (WPP_CONTROL(WPP_BIT_ ## lvl).AutoLogVerboseEnabled)
#endif

NTSTATUS
WppAutoLogTrace(
    IN PVOID              AutoLogContext,
    IN UCHAR              MessageLevel,
    IN ULONG              MessageFlags,
    IN LPGUID             MessageGuid,
    IN USHORT             MessageNumber,
    IN ...
    );

#else
#define _ENABLE_WPP_RECORDER FALSE
#endif

VOID
WppLoadTracingSupport(
    VOID
    );

NTSTATUS
WppTraceCallback(
    _In_ UCHAR MinorFunction,
    _In_opt_ PVOID DataPath,
    _In_ ULONG BufferLength,
    _Inout_updates_bytes_(BufferLength) PVOID Buffer,
    _Inout_ PVOID Context,
    _Out_ PULONG Size
    );

#if !defined(WPP_TRACE_CONTROL_NULL_GUID)
DEFINE_GUID(WPP_TRACE_CONTROL_NULL_GUID, 0x00000000L, 0x0000, 0x0000, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);
#endif

#define WPP_TRACE_CONTROL(Function,Buffer,BufferSize,ReturnSize) WppTraceCallback(Function,NULL,BufferSize,Buffer,&WPP_CB[0],&ReturnSize);

__inline ULONG64 WppQueryLogger(_In_opt_ PCWSTR LoggerName)
{
    if (WppTraceWinXP != WPPTraceSuite) {
        return (ULONG64)0;
    }

    ULONG ReturnLength;
    LONG Status;
    ULONG64 TraceHandle;
    UNICODE_STRING Buffer;

    RtlInitUnicodeString(&Buffer, LoggerName ? LoggerName : L"stdout");

    Status = pfnWppQueryTraceInformation(TraceHandleByNameClass,
                                         (PVOID)&TraceHandle,
                                         sizeof(TraceHandle),
                                         &ReturnLength,
                                         (PVOID)&Buffer
                                         );
    if (Status != STATUS_SUCCESS) {
        return (ULONG64)0;
    }

    return TraceHandle;
}

typedef LONG (*WMIENTRY_NEW)(
    _In_ UCHAR MinorFunction,
    _In_opt_ PVOID DataPath,
    _In_ ULONG BufferLength,
    _Inout_updates_bytes_(BufferLength) PVOID Buffer,
    _In_ PVOID Context,
    _Out_ PULONG Size
    );

typedef struct _WPP_TRACE_CONTROL_BLOCK
{
    WMIENTRY_NEW                        Callback;
    LPCGUID                             ControlGuid;
    struct _WPP_TRACE_CONTROL_BLOCK    *Next;
    __int64                             Logger;
    PUNICODE_STRING                     RegistryPath;
    UCHAR                               FlagsLen;
    UCHAR                               Level;
    USHORT                              Reserved;
    ULONG                               Flags[1];
    ULONG                               ReservedFlags;
    REGHANDLE                           RegHandle;
#if ENABLE_WPP_RECORDER
    PVOID                               AutoLogContext;
    USHORT                              AutoLogVerboseEnabled;
    USHORT                              AutoLogAttachToMiniDump;
#endif
} WPP_TRACE_CONTROL_BLOCK, *PWPP_TRACE_CONTROL_BLOCK;

VOID WppCleanupKm(_When_(_ENABLE_WPP_RECORDER, _In_) _When_(!_ENABLE_WPP_RECORDER, _In_opt_) PDRIVER_OBJECT DriverObject);

#define WPP_CLEANUP(DriverObject) WppCleanupKm((PDRIVER_OBJECT)DriverObject)

#define WPP_IsValidSid RtlValidSid
#define WPP_GetLengthSid RtlLengthSid

//
// Callback routine to be defined by the driver, which will be called from WPP callback
// WPP will pass current valued of : GUID, Logger, Enable, Flags, and Level
//
// To activate driver must define WPP_PRIVATE_ENABLE_CALLBACK in their code, sample below
// #define WPP_PRIVATE_ENABLE_CALLBACK MyPrivateCallback;
//
typedef
VOID
(*PFN_WPP_PRIVATE_ENABLE_CALLBACK)(
    _In_ LPCGUID Guid,
    _In_ __int64 Logger,
    _In_ BOOLEAN Enable,
    _In_ ULONG Flags,
    _In_ UCHAR Level);

#ifdef __cplusplus
} // extern "C"
#endif

#endif  // #ifndef WPP_ALREADY_INCLUDED

// template control.tpl

//
//     Defines a set of macro that expand control model specified
//     with WPP_CONTROL_GUIDS (example shown below)
//     into an enum of trace levels and required structures that
//     contain the mask of levels, logger handle and some information
//     required for registration.
//

#ifndef WPP_ALREADY_INCLUDED

#define WPP_EVAL(x) x
#define WPP_STR(x)  #x
#define WPP_STRINGIZE(x) WPP_STR(x)
#define WPP_GLUE(a, b)  a ## b
#define WPP_GLUE3(a, b, c)  a ## b ## c
#define WPP_GLUE4(a, b, c, d)  a ## b ## c ## d
#define WPP_XGLUE(a, b) WPP_GLUE(a, b)
#define WPP_XGLUE3(a, b, c) WPP_GLUE3(a, b, c)
#define WPP_XGLUE4(a, b, c, d) WPP_GLUE4(a, b, c, d)

///////////////////////////////////////////////////////////////////////////////////
//
// #define WPP_CONTROL_GUIDS \
//     WPP_DEFINE_CONTROL_GUID(Regular,(81b20fea,73a8,4b62,95bc,354477c97a6f), \
//       WPP_DEFINE_BIT(Error)      \
//       WPP_DEFINE_BIT(Unusual)    \
//       WPP_DEFINE_BIT(Noise)      \
//    )        \
//    WPP_DEFINE_CONTROL_GUID(HiFreq,(91b20fea,73a8,4b62,95bc,354477c97a6f), \
//       WPP_DEFINE_BIT(Entry)      \
//       WPP_DEFINE_BIT(Exit)       \
//       WPP_DEFINE_BIT(ApiCalls)   \
//       WPP_DEFINE_BIT(RandomJunk) \
//       WPP_DEFINE_BIT(LovePoem)   \
//    )

#ifdef __cplusplus
extern "C" {
#endif

#ifndef WPP_NO_CONTROL_GUIDS

#ifdef WPP_DEFAULT_CONTROL_GUID
#  ifdef WPP_CONTROL_GUIDS
#     error WPP_DEFAULT_CONTROL_GUID cannot be used together with WPP_CONTROL_GUIDS.
#  else // WPP_CONTROL_GUIDS
#     define WPP_CONTROL_GUIDS \
         WPP_DEFINE_CONTROL_GUID(Default,(WPP_DEFAULT_CONTROL_GUID), \
         WPP_DEFINE_BIT(Error)   \
         WPP_DEFINE_BIT(Unusual) \
         WPP_DEFINE_BIT(Noise)   \
      )
#  endif // WPP_CONTROL_GUIDS
#endif // WPP_DEFAULT_CONTROL_GUID

#ifndef WPP_CONTROL_GUIDS
#  pragma message(__FILE__ " : error : Please define control model via WPP_CONTROL_GUIDS or WPP_DEFAULT_CONTROL_GUID macros")
#  pragma message(__FILE__ " : error : don't forget to call WPP_INIT_TRACING and WPP_CLEANUP in your main, DriverEntry or DllInit")
#  pragma message(__FILE__ " : error : see tracewpp.doc for further information")
#  error WPP_CONTROL_GUIDS not defined.
#endif // WPP_CONTROL_GUIDS
// a set of macro to convert a guid in a form x(81b20fea,73a8,4b62,95bc,354477c97a6f)
// into either a a struct or text string

#define _WPPW(x) WPP_GLUE(L, x)

#define WPP_GUID_NORM(l,w1,w2,w3,ll) l ## w1 ## w2 ## w3 ## ll
#define WPP_GUID_TEXT(l,w1,w2,w3,ll) #l "-" #w1 "-" #w2 "-" #w3 "-" #ll
#define WPP_GUID_WTEXT(l,w1,w2,w3,ll) _WPPW(#l) L"-" _WPPW(#w1) L"-" _WPPW(#w2) L"-" _WPPW(#w3) L"-" _WPPW(#ll)
#define WPP_EXTRACT_BYTE(val,n) (((ULONGLONG)(0x ## val) >> (8 * n)) & 0xFF)
#define WPP_GUID_STRUCT(l,w1,w2,w3,ll) {0x ## l, 0x ## w1, 0x ## w2,\
     {WPP_EXTRACT_BYTE(w3, 1), WPP_EXTRACT_BYTE(w3, 0),\
      WPP_EXTRACT_BYTE(ll, 5), WPP_EXTRACT_BYTE(ll, 4),\
      WPP_EXTRACT_BYTE(ll, 3), WPP_EXTRACT_BYTE(ll, 2),\
      WPP_EXTRACT_BYTE(ll, 1), WPP_EXTRACT_BYTE(ll, 0)} }

#ifndef WPP_FORCEINLINE
#define WPP_FORCEINLINE __forceinline
#endif

// define an enum of control block names
//////
#define WPP_DEFINE_CONTROL_GUID(Name,Guid,Bits) WPP_XGLUE(WPP_CTL_, WPP_EVAL(Name)),
enum WPP_CTL_NAMES { WPP_CONTROL_GUIDS WPP_LAST_CTL};
#undef WPP_DEFINE_CONTROL_GUID

// define control guids
//////
#define WPP_DEFINE_CONTROL_GUID(Name,Guid,Bits) \
extern __declspec(selectany) const GUID WPP_XGLUE4(WPP_, ThisDir, _CTLGUID_, WPP_EVAL(Name)) = WPP_GUID_STRUCT Guid;
WPP_CONTROL_GUIDS
#undef WPP_DEFINE_CONTROL_GUID

// define enums of individual bits
/////
#define WPP_DEFINE_CONTROL_GUID(Name,Guid,Bits) \
    WPP_XGLUE(WPP_BLOCK_START_, WPP_EVAL(Name)) = WPP_XGLUE(WPP_CTL_, WPP_EVAL(Name)) * 0x10000, Bits WPP_XGLUE(WPP_BLOCK_END_, WPP_EVAL(Name)),
# define WPP_DEFINE_BIT(Name) WPP_BIT_ ## Name,
enum WPP_DEFINE_BIT_NAMES { WPP_CONTROL_GUIDS };
# undef WPP_DEFINE_BIT
#undef WPP_DEFINE_CONTROL_GUID

#define WPP_MASK(CTL)    (1 << ( ((CTL)-1) & 31 ))
#define WPP_FLAG_NO(CTL) ( (0xFFFF & ((CTL)-1) ) / 32)
#define WPP_CTRL_NO(CTL) ((CTL) >> 16)

// calculate how many DWORDs we need to get the required number of bits
// upper estimate. Sometimes will be off by one
#define WPP_DEFINE_CONTROL_GUID(Name,Guid,Bits) | WPP_XGLUE(WPP_BLOCK_END_, WPP_EVAL(Name))
enum _WPP_FLAG_LEN_ENUM { WPP_FLAG_LEN = 1 | ((0 WPP_CONTROL_GUIDS) & 0xFFFF) / 32 };
#undef WPP_DEFINE_CONTROL_GUID

//
// Check that maximum number of flags does not exceed 32
//
#ifndef C_ASSERT
#define C_ASSERT(e) typedef char __C_ASSERT__[(e)?1:-1]
#endif

#define MAX_NUMBER_OF_ETW_FLAGS 34 // 32 flags plus 2 separators
#define WPP_DEFINE_CONTROL_GUID(Name,Guid,Bits) && ((WPP_XGLUE(WPP_BLOCK_END_, WPP_EVAL(Name) & 0xFFFF)) < MAX_NUMBER_OF_ETW_FLAGS)
enum _WPP_FLAG_LEN_ENUM_MAX { WPP_MAX_FLAG_LEN_CHECK = (1 WPP_CONTROL_GUIDS) };
#undef WPP_DEFINE_CONTROL_GUID

#ifndef WPP_CB
#define WPP_CB      WPP_GLOBAL_Control
#endif
#ifndef WPP_CB_TYPE
#define WPP_CB_TYPE WPP_PROJECT_CONTROL_BLOCK
#endif

#ifndef WPP_CHECK_INIT
#define WPP_CHECK_INIT (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) &&
#endif

typedef union {
    WPP_TRACE_CONTROL_BLOCK Control;
    UCHAR ReserveSpace[ sizeof(WPP_TRACE_CONTROL_BLOCK) + sizeof(ULONG) * (WPP_FLAG_LEN - 1) ];
} WPP_CB_TYPE ;


extern __declspec(selectany) WPP_CB_TYPE *WPP_CB = (WPP_CB_TYPE*)&WPP_CB;

#if ENABLE_WPP_RECORDER
#ifndef WPP_RECORDER_CHECK_INIT
#define WPP_RECORDER_CHECK_INIT (WPP_RECORDER_INITIALIZED != (WPP_CB_TYPE*)&WPP_RECORDER_INITIALIZED) &&
#endif
// Global varaible used to track if WPP_RECORDER was initialized.
// It will be initialized on calling WPP_INIT_TRACING macro.
extern __declspec(selectany) WPP_CB_TYPE *WPP_RECORDER_INITIALIZED = (WPP_CB_TYPE*)&WPP_RECORDER_INITIALIZED;
#endif

#define WPP_CONTROL(CTL) (WPP_CB[WPP_CTRL_NO(CTL)].Control)

// Define the default WPP_LEVEL_LOGGER/WPP_LEVEL_ENABLED macros for the
// predefined DoTraceMessage(LEVEL) function.
#ifdef WPP_USE_TRACE_LEVELS

#ifndef WPP_LEVEL_LOGGER
#define WPP_LEVEL_LOGGER(lvl) (WPP_CONTROL(WPP_BIT_ ## DUMMY).Logger),
#endif
#ifndef WPP_LEVEL_ENABLED
#define WPP_LEVEL_ENABLED(lvl) (WPP_CONTROL(WPP_BIT_ ## DUMMY).Level >= lvl)
#endif

#else // WPP_USE_TRACE_LEVELS

// For historical reasons, the use of LEVEL means flags by default.
// This was a bad choice but very difficult to undo.
#ifndef WPP_LEVEL_LOGGER
#  define WPP_LEVEL_LOGGER(CTL)  (WPP_CONTROL(WPP_BIT_ ## CTL).Logger),
#endif
#ifndef WPP_LEVEL_ENABLED
#  define WPP_LEVEL_ENABLED(CTL) (WPP_CONTROL(WPP_BIT_ ## CTL).Flags[WPP_FLAG_NO(WPP_BIT_ ## CTL)] & WPP_MASK(WPP_BIT_ ## CTL))
#endif

#endif // WPP_USE_TRACE_LEVELS

// Define default WPP_FLAG_LOGGER/WPP_FLAG_ENABLED macros for convenience in
// defining a function that takes a FLAG parameter e.g. DoTrace(FLAG).
#ifndef WPP_FLAG_LOGGER
#  define WPP_FLAG_LOGGER(CTL)  (WPP_CONTROL(WPP_BIT_ ## CTL).Logger),
#endif
#ifndef WPP_FLAG_ENABLED
#  define WPP_FLAG_ENABLED(CTL) (WPP_CONTROL(WPP_BIT_ ## CTL).Flags[WPP_FLAG_NO(WPP_BIT_ ## CTL)] & WPP_MASK(WPP_BIT_ ## CTL))
#endif

#ifndef WPP_ENABLED
#  define WPP_ENABLED() 1
#endif
#ifndef WPP_LOGGER
#  define WPP_LOGGER() (WPP_CB[0].Control.Logger),
#endif

#endif // WPP_NO_CONTROL_GUIDS

#ifndef WPP_GET_LOGGER
#  define WPP_GET_LOGGER Logger
#endif

#ifndef WPP_LOGGER_ARG
#  define WPP_LOGGER_ARG TRACEHANDLE Logger,
#endif

#ifdef __cplusplus
} // extern "C"
#endif

#endif // WPP_ALREADY_INCLUDED

// template tracemacro.tpl

// This template expects:
//      WPP_THIS_FILE defined (see header.tpl)
//      WPP_LOGGER_ARG  defined
//      WPP_GET_LOGGER  defined
//      WPP_ENABLED() defined

#ifdef __cplusplus
extern "C" {
#endif

#ifdef WPP_ALREADY_INCLUDED

#undef WPP_LOCAL_TraceGuids
#undef WPP_INVOKE_WPP_DEBUG

#else // WPP_ALREADY_INCLUDED

#ifndef NO_CHECK_FOR_NULL_STRING
#ifndef WPP_CHECK_FOR_NULL_STRING
#define WPP_CHECK_FOR_NULL_STRING
#endif
#endif // NO_CHECK_FOR_NULL_STRING

#define WPP_FLATTEN(...) __VA_ARGS__
#define WPP_GLUE5(a, b, c, d, e)  a ## b ## c ## d ## e
#define WPP_XGLUE5(a, b, c, d, e)  WPP_GLUE5(a, b, c, d, e)
#define WPP_(Id) WPP_XGLUE5(WPP_, Id, _, WPP_THIS_FILE, __LINE__)

#ifndef WPP_INLINE
#define WPP_INLINE DECLSPEC_NOINLINE __inline
#endif

#ifndef WPP_FORCEINLINE
#define WPP_FORCEINLINE __forceinline
#endif

#endif // WPP_ALREADY_INCLUDED

#ifdef WPP_NO_ANNOTATIONS

#define WPP_ANNOTATE(x)

#else // WPP_NO_ANNOTATIONS

#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_dyn_cpp155
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_dyn_cpp165
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_dyn_cpp184
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_dyn_cpp213
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_dyn_cpp223
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_dyn_cpp238
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_dyn_cpp249
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_dyn_cpp262
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_dyn_cpp285
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_dyn_cpp296
#endif
#ifdef WPP_EMIT_FUNC_NAME
#define WPP_FUNC_NAME L" FUNC=" _WPPW(__FUNCTION__)
#else // WPP_EMIT_FUNC_NAME
#define WPP_FUNC_NAME
#endif // WPP_EMIT_FUNC_NAME

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dyn_cpp155_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"MasterHide // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 10 \"%0RtlGetVersion returned %10!s!\" //   LEVEL=TRACE_LEVEL_ERROR EVENT=GENERAL" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dyn_cpp155_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"96473be4-a855-3536-41dc-ddc109374875 MasterHide // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 10 \"%0RtlGetVersion returned %10!s!\" //   LEVEL=TRACE_LEVEL_ERROR EVENT=GENERAL" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_dyn_cpp155
# define WPP_ANNOTATE_dyn_cpp155 WPP_ANNOTATE_dyn_cpp155_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemNTSTATUS -- 10" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_dyn_cpp155
# define WPP_ANNOTATE_dyn_cpp155 WPP_ANNOTATE_dyn_cpp155_FINAL( \
    "TMF:", \
    "dyn.cpp", \
    "dyn_cpp155", \
    L"{", \
    L"status, ItemNTSTATUS -- 10" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_dyn_cpp155

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dyn_cpp165_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"MasterHide // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 11 \"%0Failed to obtain kernel NT headers!\" //   LEVEL=TRACE_LEVEL_ERROR EVENT=GENERAL" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dyn_cpp165_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"96473be4-a855-3536-41dc-ddc109374875 MasterHide // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 11 \"%0Failed to obtain kernel NT headers!\" //   LEVEL=TRACE_LEVEL_ERROR EVENT=GENERAL" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_dyn_cpp165
# define WPP_ANNOTATE_dyn_cpp165 WPP_ANNOTATE_dyn_cpp165_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_dyn_cpp165
# define WPP_ANNOTATE_dyn_cpp165 WPP_ANNOTATE_dyn_cpp165_FINAL( \
    "TMF:", \
    "dyn.cpp", \
    "dyn_cpp165", \
    L"{", \
    L"}")
#endif // WPP_PUBLIC_ANNOT_dyn_cpp165

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dyn_cpp184_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"MasterHide // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 12 \"%0Unsupported Windows version! major:%10!d! minor:%11!d!\" //   LEVEL=TRACE_LEVEL_ERROR EVENT=GENERAL" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dyn_cpp184_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"96473be4-a855-3536-41dc-ddc109374875 MasterHide // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 12 \"%0Unsupported Windows version! major:%10!d! minor:%11!d!\" //   LEVEL=TRACE_LEVEL_ERROR EVENT=GENERAL" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_dyn_cpp184
# define WPP_ANNOTATE_dyn_cpp184 WPP_ANNOTATE_dyn_cpp184_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemLong -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_dyn_cpp184
# define WPP_ANNOTATE_dyn_cpp184 WPP_ANNOTATE_dyn_cpp184_FINAL( \
    "TMF:", \
    "dyn.cpp", \
    "dyn_cpp184", \
    L"{", \
    L"majorVersion, ItemLong -- 10" , \
    L"minorVersion, ItemLong -- 11" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_dyn_cpp184

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dyn_cpp213_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"MasterHide // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 13 \"%0EtwpDebuggerData not found!\" //   LEVEL=TRACE_LEVEL_ERROR EVENT=GENERAL" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dyn_cpp213_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"96473be4-a855-3536-41dc-ddc109374875 MasterHide // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 13 \"%0EtwpDebuggerData not found!\" //   LEVEL=TRACE_LEVEL_ERROR EVENT=GENERAL" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_dyn_cpp213
# define WPP_ANNOTATE_dyn_cpp213 WPP_ANNOTATE_dyn_cpp213_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_dyn_cpp213
# define WPP_ANNOTATE_dyn_cpp213 WPP_ANNOTATE_dyn_cpp213_FINAL( \
    "TMF:", \
    "dyn.cpp", \
    "dyn_cpp213", \
    L"{", \
    L"}")
#endif // WPP_PUBLIC_ANNOT_dyn_cpp213

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dyn_cpp223_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"MasterHide // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 14 \"%0Invalid EtwpDebuggerData at 0x%10!p!\" //   LEVEL=TRACE_LEVEL_ERROR EVENT=GENERAL" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dyn_cpp223_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"96473be4-a855-3536-41dc-ddc109374875 MasterHide // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 14 \"%0Invalid EtwpDebuggerData at 0x%10!p!\" //   LEVEL=TRACE_LEVEL_ERROR EVENT=GENERAL" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_dyn_cpp223
# define WPP_ANNOTATE_dyn_cpp223 WPP_ANNOTATE_dyn_cpp223_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemPtr -- 10" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_dyn_cpp223
# define WPP_ANNOTATE_dyn_cpp223 WPP_ANNOTATE_dyn_cpp223_FINAL( \
    "TMF:", \
    "dyn.cpp", \
    "dyn_cpp223", \
    L"{", \
    L"EtwpDebuggerData, ItemPtr -- 10" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_dyn_cpp223

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dyn_cpp238_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"MasterHide // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 15 \"%0HvlpReferenceTscPage not found!\" //   LEVEL=TRACE_LEVEL_ERROR EVENT=GENERAL" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dyn_cpp238_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"96473be4-a855-3536-41dc-ddc109374875 MasterHide // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 15 \"%0HvlpReferenceTscPage not found!\" //   LEVEL=TRACE_LEVEL_ERROR EVENT=GENERAL" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_dyn_cpp238
# define WPP_ANNOTATE_dyn_cpp238 WPP_ANNOTATE_dyn_cpp238_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_dyn_cpp238
# define WPP_ANNOTATE_dyn_cpp238 WPP_ANNOTATE_dyn_cpp238_FINAL( \
    "TMF:", \
    "dyn.cpp", \
    "dyn_cpp238", \
    L"{", \
    L"}")
#endif // WPP_PUBLIC_ANNOT_dyn_cpp238

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dyn_cpp249_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"MasterHide // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 16 \"%0HvlGetQpcBias not found!\" //   LEVEL=TRACE_LEVEL_ERROR EVENT=GENERAL" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dyn_cpp249_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"96473be4-a855-3536-41dc-ddc109374875 MasterHide // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 16 \"%0HvlGetQpcBias not found!\" //   LEVEL=TRACE_LEVEL_ERROR EVENT=GENERAL" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_dyn_cpp249
# define WPP_ANNOTATE_dyn_cpp249 WPP_ANNOTATE_dyn_cpp249_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_dyn_cpp249
# define WPP_ANNOTATE_dyn_cpp249 WPP_ANNOTATE_dyn_cpp249_FINAL( \
    "TMF:", \
    "dyn.cpp", \
    "dyn_cpp249", \
    L"{", \
    L"}")
#endif // WPP_PUBLIC_ANNOT_dyn_cpp249

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dyn_cpp262_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"MasterHide // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 17 \"%0Windows 10 Threshold 2+ detect, initializing debugger block\" //   LEVEL=TRACE_LEVEL_INFORMATION EVENT=GENERAL" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dyn_cpp262_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"96473be4-a855-3536-41dc-ddc109374875 MasterHide // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 17 \"%0Windows 10 Threshold 2+ detect, initializing debugger block\" //   LEVEL=TRACE_LEVEL_INFORMATION EVENT=GENERAL" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_dyn_cpp262
# define WPP_ANNOTATE_dyn_cpp262 WPP_ANNOTATE_dyn_cpp262_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_dyn_cpp262
# define WPP_ANNOTATE_dyn_cpp262 WPP_ANNOTATE_dyn_cpp262_FINAL( \
    "TMF:", \
    "dyn.cpp", \
    "dyn_cpp262", \
    L"{", \
    L"}")
#endif // WPP_PUBLIC_ANNOT_dyn_cpp262

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dyn_cpp285_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"MasterHide // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 18 \"%0Failed to read debugger block!\" //   LEVEL=TRACE_LEVEL_ERROR EVENT=GENERAL" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dyn_cpp285_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"96473be4-a855-3536-41dc-ddc109374875 MasterHide // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 18 \"%0Failed to read debugger block!\" //   LEVEL=TRACE_LEVEL_ERROR EVENT=GENERAL" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_dyn_cpp285
# define WPP_ANNOTATE_dyn_cpp285 WPP_ANNOTATE_dyn_cpp285_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_dyn_cpp285
# define WPP_ANNOTATE_dyn_cpp285 WPP_ANNOTATE_dyn_cpp285_FINAL( \
    "TMF:", \
    "dyn.cpp", \
    "dyn_cpp285", \
    L"{", \
    L"}")
#endif // WPP_PUBLIC_ANNOT_dyn_cpp285

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dyn_cpp296_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"MasterHide // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 19 \"%0Failed to fill dynamic system offsets!\" //   LEVEL=TRACE_LEVEL_ERROR EVENT=GENERAL" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_dyn_cpp296_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"96473be4-a855-3536-41dc-ddc109374875 MasterHide // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 19 \"%0Failed to fill dynamic system offsets!\" //   LEVEL=TRACE_LEVEL_ERROR EVENT=GENERAL" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_dyn_cpp296
# define WPP_ANNOTATE_dyn_cpp296 WPP_ANNOTATE_dyn_cpp296_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_dyn_cpp296
# define WPP_ANNOTATE_dyn_cpp296 WPP_ANNOTATE_dyn_cpp296_FINAL( \
    "TMF:", \
    "dyn.cpp", \
    "dyn_cpp296", \
    L"{", \
    L"}")
#endif // WPP_PUBLIC_ANNOT_dyn_cpp296

# define WPP_ANNOTATE(x) WPP_ANNOTATE_ ## x,

#endif // WPP_NO_ANNOTATIONS

#ifdef WPP_USER_MSG_GUID

#define WPP_LOCAL_MSG_VAR(Guid) WPP_XGLUE3(WPP_, WPP_GUID_NORM Guid, _Traceguids)

#define WPP_LOCAL_MSG_GUID(Guid) \
extern const __declspec(selectany) GUID WPP_LOCAL_MSG_VAR(Guid)[] = { WPP_GUID_STRUCT Guid }

WPP_LOCAL_MSG_GUID(WPP_USER_MSG_GUID);
#define WPP_LOCAL_TraceGuids WPP_LOCAL_MSG_VAR(WPP_USER_MSG_GUID)

#else // WPP_USER_MSG_GUID

#define WPP_LOCAL_TraceGuids WPP_96473be4a855353641dcddc109374875_Traceguids
extern const __declspec(selectany) GUID WPP_LOCAL_TraceGuids[] = { {0x96473be4,0xa855,0x3536,{0x41,0xdc,0xdd,0xc1,0x09,0x37,0x48,0x75}}, };

#endif // WPP_USER_MSG_GUID

#ifndef WPP_ALREADY_INCLUDED

#ifndef WPP_TRACE_OPTIONS
enum { WPP_TRACE_OPTIONS =
    TRACE_MESSAGE_SEQUENCE   |
    TRACE_MESSAGE_GUID       |
    TRACE_MESSAGE_SYSTEMINFO |
    TRACE_MESSAGE_TIMESTAMP };
#endif // WPP_TRACE_OPTIONS

#ifndef WPP_LOGPAIR_SEPARATOR
# define WPP_LOGPAIR_SEPARATOR ,
#endif
#ifndef WPP_LOGPAIR_SIZET
# define WPP_LOGPAIR_SIZET SIZE_T
#endif
#ifndef WPP_LOGPAIR
# define WPP_LOGPAIR(_Size, _Addr)     (_Addr),((WPP_LOGPAIR_SIZET)(_Size))WPP_LOGPAIR_SEPARATOR
#endif

#define WPP_LOGTYPEVAL(_Type, _Value) WPP_LOGPAIR(sizeof(_Type), &(_Value))
#define WPP_LOGTYPEPTR(_Value)        WPP_LOGPAIR(sizeof(*(_Value)), (_Value))

// Marshalling macros.

#ifndef WPP_LOGASTR
# ifdef WPP_CHECK_FOR_NULL_STRING
#  define WPP_LOGASTR(_value)  WPP_LOGPAIR( \
    (_value) ? strlen(_value) + 1 : 5, \
    (_value) ?       (_value)     : "NULL" )
# else // WPP_CHECK_FOR_NULL_STRING
#  define WPP_LOGASTR(_value)  WPP_LOGPAIR( \
    strlen(_value) + 1, \
    _value )
# endif // WPP_CHECK_FOR_NULL_STRING
#endif // WPP_LOGASTR

#ifndef WPP_LOGWSTR
# ifdef WPP_CHECK_FOR_NULL_STRING
#  define WPP_LOGWSTR(_value)  WPP_LOGPAIR( \
    ((_value) ? wcslen(_value) + 1 : 5) * sizeof(WCHAR), \
     (_value) ?       (_value)     : L"NULL" )
# else // WPP_CHECK_FOR_NULL_STRING
#  define WPP_LOGWSTR(_value)  WPP_LOGPAIR( \
    (wcslen(_value) + 1) * sizeof(WCHAR), \
    _value )
# endif // WPP_CHECK_FOR_NULL_STRING
#endif // WPP_LOGWSTR

#ifndef WPP_LOGPGUID
# define WPP_LOGPGUID(_value) WPP_LOGPAIR( sizeof(GUID), (_value) )
#endif // WPP_LOGPGUID

#ifndef WPP_LOGPSID
# ifdef WPP_CHECK_FOR_NULL_STRING
# define WPP_LOGPSID(_value)  WPP_LOGPAIR( \
    (_value) && WPP_IsValidSid(_value) ? WPP_GetLengthSid(_value) : 5, \
    (_value) && WPP_IsValidSid(_value) ? (_value) : (void const*)"NULL")
# else // WPP_CHECK_FOR_NULL_STRING
# define WPP_LOGPSID(_value)  WPP_LOGPAIR( \
    WPP_GetLengthSid(_value), \
    (_value) )
#endif // WPP_CHECK_FOR_NULL_STRING
#endif // WPP_LOGPSID

#ifndef WPP_LOGCSTR
# define WPP_LOGCSTR(_x) \
    WPP_LOGPAIR( sizeof(USHORT),      &(_x).Length ) \
    WPP_LOGPAIR( (USHORT)(_x).Length, (USHORT)(_x).Length ? (_x).Buffer : "" )
#endif // WPP_LOGCSTR

#ifndef WPP_LOGUSTR
# define WPP_LOGUSTR(_x) \
    WPP_LOGPAIR( sizeof(USHORT),      &(_x).Length ) \
    WPP_LOGPAIR( (USHORT)(_x).Length, (USHORT)(_x).Length ? (_x).Buffer : L"" )
#endif // WPP_LOGUSTR

#ifndef WPP_LOGPUSTR
#ifdef WPP_CHECK_FOR_NULL_STRING
# define WPP_LOGPUSTR(_x) \
    WPP_LOGPAIR( \
        sizeof(USHORT), \
        (_x) ? &(_x)->Length : (void const*)L"\x08" ) \
    WPP_LOGPAIR( \
        (_x)                         ? (USHORT)(_x)->Length : 0x08, \
        (_x) && (USHORT)(_x)->Length ? (_x)->Buffer         : L"NULL" )
#else // WPP_CHECK_FOR_NULL_STRING
# define WPP_LOGPUSTR(_x) WPP_LOGUSTR(*(_x))
#endif // WPP_CHECK_FOR_NULL_STRING
#endif // WPP_LOGPUSTR

#ifndef WPP_LOGPCSTR
#ifdef WPP_CHECK_FOR_NULL_STRING
# define WPP_LOGPCSTR(_x) \
    WPP_LOGPAIR( \
        sizeof(USHORT), \
        (_x) ? &(_x)->Length : (void const*)L"\x04" ) \
    WPP_LOGPAIR( \
        (_x)                         ? (USHORT)(_x)->Length : 0x04, \
        (_x) && (USHORT)(_x)->Length ? (_x)->Buffer         : "NULL" )
#else // WPP_CHECK_FOR_NULL_STRING
# define WPP_LOGPCSTR(_x) WPP_LOGCSTR(*(_x))
#endif // WPP_CHECK_FOR_NULL_STRING
#endif // WPP_LOGPCSTR

#ifdef __cplusplus

#ifndef WPP_POINTER_TO_USHORT
struct WppPointerToUshort
{
    USHORT m_val;
    WPP_FORCEINLINE explicit WppPointerToUshort(USHORT val) : m_val(val) {}
    WPP_FORCEINLINE USHORT const* get() const { return &m_val; }
};
#define WPP_POINTER_TO_USHORT(val) (WppPointerToUshort((val)).get())
#endif // WPP_POINTER_TO_USHORT

#ifndef WPP_LOGCPPSTR
#define WPP_LOGCPPSTR(_value) \
    WPP_LOGPAIR( \
        sizeof(USHORT), \
        WPP_POINTER_TO_USHORT((USHORT)((_value).size()*sizeof(*(_value).c_str()))) ) \
    WPP_LOGPAIR( \
        (USHORT)((_value).size()*sizeof(*(_value).c_str())), \
        (_value).c_str() )
#endif // WPP_LOGCPPSTR

#ifndef WPP_LOGCPPVEC
#define WPP_LOGCPPVEC(_value) \
    WPP_LOGPAIR( \
        sizeof(USHORT), \
        WPP_POINTER_TO_USHORT((USHORT)((_value).size()*sizeof(*(_value).data()))) ) \
    WPP_LOGPAIR( \
        (USHORT)((_value).size()*sizeof(*(_value).data())), \
        (_value).data() + ((_value).data() == NULL) )
#endif // WPP_LOGCPPVEC

#endif // __cplusplus

#ifndef WPP_BINARY_def
# define WPP_BINARY_def
typedef struct tagWPP_BINARY
{
    _Field_size_bytes_(Length) void const* Buffer;
    USHORT Length;
} WPP_BINARY;
#endif // WPP_BINARY_def

#ifndef WPP_BINARY_func
# define WPP_BINARY_func
WPP_FORCEINLINE WPP_BINARY
WppBinary(_In_reads_bytes_(Length) void const* Buffer, USHORT Length)
{
    WPP_BINARY data;
    data.Buffer = Buffer;
    data.Length = Length;
    return data;
}
#endif // WPP_BINARY_func

#endif // WPP_ALREADY_INCLUDED

#ifndef WPP_ENABLE_FLAG_BIT
#define WPP_ENABLE_FLAG_BIT(flag) (WPP_CB[((flag) >> 16)].Control).Flags[( (0xFFFF & ((flag)-1) ) / 32)] & (1 << ( ((flag)-1) & 31 ))
#endif

#ifndef WPP_SF__def
# define WPP_SF__def
WPP_INLINE void WPP_SF_(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid)
{ WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id,  (void*)0); }
#endif // WPP_SF__def

#if ENABLE_WPP_RECORDER

#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_AND_TRACE_SF_ function
//
#ifndef WPP_RECORDER_AND_TRACE_SF__def
#define WPP_RECORDER_AND_TRACE_SF__def
WPP_INLINE
VOID
WPP_RECORDER_AND_TRACE_SF_(
    WPP_LOGGER_ARG
    BOOLEAN  wppEnabled,
    BOOLEAN  recorderEnabled,
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    
    )
{
    if (wppEnabled)
    {
        WPP_TRACE( WPP_GET_LOGGER,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                    (void*)0);
    }

    if (recorderEnabled)
    {
        WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id,  (void*)0 );
    }
}
#endif // WPP_RECORDER_AND_TRACE_SF__def

#else  // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_SP_ function
//
#ifndef WPP_RECORDER_SF__def
#define WPP_RECORDER_SF__def
WPP_INLINE
VOID
WPP_RECORDER_SF_(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) &&
        (WPP_CONTROL(flags).Level >= level))
    {
        WPP_TRACE(
            WPP_CONTROL(flags).Logger,
            WPP_TRACE_OPTIONS,
            (LPGUID)traceGuid,
            id,
             (void*)0);
    }

    WPP_RECORDER(AutoLogContext, level, flags, (LPGUID) traceGuid, id,  (void*)0);
}
#endif // WPP_RECORDER_SF__def

#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

#endif // ENABLE_WPP_RECORDER

#ifndef WPP_SF_d_def
# define WPP_SF_d_def
WPP_INLINE void WPP_SF_d(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, signed int _a1)
{ WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGTYPEVAL(signed int, _a1)  (void*)0); }
#endif // WPP_SF_d_def

#if ENABLE_WPP_RECORDER

#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_AND_TRACE_SF_d function
//
#ifndef WPP_RECORDER_AND_TRACE_SF_d_def
#define WPP_RECORDER_AND_TRACE_SF_d_def
WPP_INLINE
VOID
WPP_RECORDER_AND_TRACE_SF_d(
    WPP_LOGGER_ARG
    BOOLEAN  wppEnabled,
    BOOLEAN  recorderEnabled,
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , signed int _a1
    )
{
    if (wppEnabled)
    {
        WPP_TRACE( WPP_GET_LOGGER,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                   WPP_LOGTYPEVAL(signed int, _a1)  (void*)0);
    }

    if (recorderEnabled)
    {
        WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGTYPEVAL(signed int, _a1)  (void*)0 );
    }
}
#endif // WPP_RECORDER_AND_TRACE_SF_d_def

#else  // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_SP_d function
//
#ifndef WPP_RECORDER_SF_d_def
#define WPP_RECORDER_SF_d_def
WPP_INLINE
VOID
WPP_RECORDER_SF_d(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , signed int _a1
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) &&
        (WPP_CONTROL(flags).Level >= level))
    {
        WPP_TRACE(
            WPP_CONTROL(flags).Logger,
            WPP_TRACE_OPTIONS,
            (LPGUID)traceGuid,
            id,
            WPP_LOGTYPEVAL(signed int, _a1)  (void*)0);
    }

    WPP_RECORDER(AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGTYPEVAL(signed int, _a1)  (void*)0);
}
#endif // WPP_RECORDER_SF_d_def

#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

#endif // ENABLE_WPP_RECORDER

#ifndef WPP_SF_dd_def
# define WPP_SF_dd_def
WPP_INLINE void WPP_SF_dd(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, signed int _a1, signed int _a2)
{ WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGTYPEVAL(signed int, _a1) WPP_LOGTYPEVAL(signed int, _a2)  (void*)0); }
#endif // WPP_SF_dd_def

#if ENABLE_WPP_RECORDER

#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_AND_TRACE_SF_dd function
//
#ifndef WPP_RECORDER_AND_TRACE_SF_dd_def
#define WPP_RECORDER_AND_TRACE_SF_dd_def
WPP_INLINE
VOID
WPP_RECORDER_AND_TRACE_SF_dd(
    WPP_LOGGER_ARG
    BOOLEAN  wppEnabled,
    BOOLEAN  recorderEnabled,
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , signed int _a1, signed int _a2
    )
{
    if (wppEnabled)
    {
        WPP_TRACE( WPP_GET_LOGGER,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                   WPP_LOGTYPEVAL(signed int, _a1) WPP_LOGTYPEVAL(signed int, _a2)  (void*)0);
    }

    if (recorderEnabled)
    {
        WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGTYPEVAL(signed int, _a1) WPP_LOGTYPEVAL(signed int, _a2)  (void*)0 );
    }
}
#endif // WPP_RECORDER_AND_TRACE_SF_dd_def

#else  // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_SP_dd function
//
#ifndef WPP_RECORDER_SF_dd_def
#define WPP_RECORDER_SF_dd_def
WPP_INLINE
VOID
WPP_RECORDER_SF_dd(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , signed int _a1, signed int _a2
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) &&
        (WPP_CONTROL(flags).Level >= level))
    {
        WPP_TRACE(
            WPP_CONTROL(flags).Logger,
            WPP_TRACE_OPTIONS,
            (LPGUID)traceGuid,
            id,
            WPP_LOGTYPEVAL(signed int, _a1) WPP_LOGTYPEVAL(signed int, _a2)  (void*)0);
    }

    WPP_RECORDER(AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGTYPEVAL(signed int, _a1) WPP_LOGTYPEVAL(signed int, _a2)  (void*)0);
}
#endif // WPP_RECORDER_SF_dd_def

#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

#endif // ENABLE_WPP_RECORDER

#ifndef WPP_SF_q_def
# define WPP_SF_q_def
WPP_INLINE void WPP_SF_q(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, const void* _a1)
{ WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGTYPEVAL(const void*, _a1)  (void*)0); }
#endif // WPP_SF_q_def

#if ENABLE_WPP_RECORDER

#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_AND_TRACE_SF_q function
//
#ifndef WPP_RECORDER_AND_TRACE_SF_q_def
#define WPP_RECORDER_AND_TRACE_SF_q_def
WPP_INLINE
VOID
WPP_RECORDER_AND_TRACE_SF_q(
    WPP_LOGGER_ARG
    BOOLEAN  wppEnabled,
    BOOLEAN  recorderEnabled,
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , const void* _a1
    )
{
    if (wppEnabled)
    {
        WPP_TRACE( WPP_GET_LOGGER,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                   WPP_LOGTYPEVAL(const void*, _a1)  (void*)0);
    }

    if (recorderEnabled)
    {
        WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGTYPEVAL(const void*, _a1)  (void*)0 );
    }
}
#endif // WPP_RECORDER_AND_TRACE_SF_q_def

#else  // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_SP_q function
//
#ifndef WPP_RECORDER_SF_q_def
#define WPP_RECORDER_SF_q_def
WPP_INLINE
VOID
WPP_RECORDER_SF_q(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , const void* _a1
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) &&
        (WPP_CONTROL(flags).Level >= level))
    {
        WPP_TRACE(
            WPP_CONTROL(flags).Logger,
            WPP_TRACE_OPTIONS,
            (LPGUID)traceGuid,
            id,
            WPP_LOGTYPEVAL(const void*, _a1)  (void*)0);
    }

    WPP_RECORDER(AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGTYPEVAL(const void*, _a1)  (void*)0);
}
#endif // WPP_RECORDER_SF_q_def

#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

#endif // ENABLE_WPP_RECORDER

// WPP_LOG_ALWAYS:
// Called for each event: WPP_LOG_ALWAYS(EX, MSG, arg1, arg2, arg3...) Other()
// If defined, the definition needs to include a trailing comma or semicolon.
// In addition, you will need to define a WPP_EX_[args](args...) macro to
// extract any needed information from the other arguments (e.g. LEVEL).
#ifndef WPP_LOG_ALWAYS
#define WPP_LOG_ALWAYS(...)
#endif

// WPP_DEBUG:
// Called for each enabled event: WPP_DEBUG((MSG, arg1, arg2, arg3...)), Other()
// Potential definition: printf MsgArgs
// Definition should not include any trailing comma or semicolon.
#ifdef WPP_DEBUG
#define WPP_INVOKE_WPP_DEBUG(MsgArgs) WPP_DEBUG(MsgArgs)
#else // WPP_DEBUG
#define WPP_INVOKE_WPP_DEBUG(MsgArgs) (void)0
#endif // WPP_DEBUG

// WPP_CALL_dyn_cpp155
#ifndef WPP_LEVEL_EVENT_PRE
#  define WPP_LEVEL_EVENT_PRE(LEVEL,EVENT)
#endif
#ifndef WPP_LEVEL_EVENT_POST
#  define WPP_LEVEL_EVENT_POST(LEVEL,EVENT)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dyn_cpp155(LEVEL, EVENT, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_EVENT(LEVEL, EVENT), MSG, _a10) \
    WPP_LEVEL_EVENT_PRE(LEVEL, EVENT) \
    do {\
        WPP_ANNOTATE(dyn_cpp155) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_EVENT_ENABLED(LEVEL, EVENT); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_EVENT_FILTER(LEVEL, EVENT); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10)); \
            WPP_RECORDER_AND_TRACE_SF_d( \
                     WPP_LEVEL_EVENT_LOGGER(LEVEL, EVENT) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_EVENT_ARGS(LEVEL, EVENT), \
                     10, \
                     WPP_LOCAL_TraceGuids+0, _a10);\
        } \
    } \
    while(0) \
    WPP_LEVEL_EVENT_POST(LEVEL, EVENT)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dyn_cpp155(LEVEL, EVENT, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_EVENT(LEVEL, EVENT), MSG, _a10) \
    WPP_LEVEL_EVENT_PRE(LEVEL, EVENT) \
    WPP_ANNOTATE(dyn_cpp155) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_EVENT_FILTER(LEVEL, EVENT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_RECORDER_SF_d( \
                WPP_RECORDER_LEVEL_EVENT_ARGS(LEVEL, EVENT), \
                10, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_EVENT_POST(LEVEL, EVENT)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_dyn_cpp155(LEVEL, EVENT, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_EVENT(LEVEL, EVENT), MSG, _a10) \
    WPP_LEVEL_EVENT_PRE(LEVEL, EVENT) \
    WPP_ANNOTATE(dyn_cpp155) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_EVENT_ENABLED(LEVEL, EVENT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_SF_d( \
                WPP_LEVEL_EVENT_LOGGER(LEVEL, EVENT) \
                10, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_EVENT_POST(LEVEL, EVENT)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_dyn_cpp165
#ifndef WPP_LEVEL_EVENT_PRE
#  define WPP_LEVEL_EVENT_PRE(LEVEL,EVENT)
#endif
#ifndef WPP_LEVEL_EVENT_POST
#  define WPP_LEVEL_EVENT_POST(LEVEL,EVENT)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dyn_cpp165(LEVEL, EVENT, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_EVENT(LEVEL, EVENT), MSG) \
    WPP_LEVEL_EVENT_PRE(LEVEL, EVENT) \
    do {\
        WPP_ANNOTATE(dyn_cpp165) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_EVENT_ENABLED(LEVEL, EVENT); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_EVENT_FILTER(LEVEL, EVENT); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_( \
                     WPP_LEVEL_EVENT_LOGGER(LEVEL, EVENT) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_EVENT_ARGS(LEVEL, EVENT), \
                     11, \
                     WPP_LOCAL_TraceGuids+0);\
        } \
    } \
    while(0) \
    WPP_LEVEL_EVENT_POST(LEVEL, EVENT)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dyn_cpp165(LEVEL, EVENT, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_EVENT(LEVEL, EVENT), MSG) \
    WPP_LEVEL_EVENT_PRE(LEVEL, EVENT) \
    WPP_ANNOTATE(dyn_cpp165) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_EVENT_FILTER(LEVEL, EVENT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_( \
                WPP_RECORDER_LEVEL_EVENT_ARGS(LEVEL, EVENT), \
                11, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_EVENT_POST(LEVEL, EVENT)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_dyn_cpp165(LEVEL, EVENT, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_EVENT(LEVEL, EVENT), MSG) \
    WPP_LEVEL_EVENT_PRE(LEVEL, EVENT) \
    WPP_ANNOTATE(dyn_cpp165) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_EVENT_ENABLED(LEVEL, EVENT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_( \
                WPP_LEVEL_EVENT_LOGGER(LEVEL, EVENT) \
                11, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_EVENT_POST(LEVEL, EVENT)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_dyn_cpp184
#ifndef WPP_LEVEL_EVENT_PRE
#  define WPP_LEVEL_EVENT_PRE(LEVEL,EVENT)
#endif
#ifndef WPP_LEVEL_EVENT_POST
#  define WPP_LEVEL_EVENT_POST(LEVEL,EVENT)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dyn_cpp184(LEVEL, EVENT, MSG, _a10, _a11) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_EVENT(LEVEL, EVENT), MSG, _a10, _a11) \
    WPP_LEVEL_EVENT_PRE(LEVEL, EVENT) \
    do {\
        WPP_ANNOTATE(dyn_cpp184) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_EVENT_ENABLED(LEVEL, EVENT); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_EVENT_FILTER(LEVEL, EVENT); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11)); \
            WPP_RECORDER_AND_TRACE_SF_dd( \
                     WPP_LEVEL_EVENT_LOGGER(LEVEL, EVENT) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_EVENT_ARGS(LEVEL, EVENT), \
                     12, \
                     WPP_LOCAL_TraceGuids+0, _a10, _a11);\
        } \
    } \
    while(0) \
    WPP_LEVEL_EVENT_POST(LEVEL, EVENT)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dyn_cpp184(LEVEL, EVENT, MSG, _a10, _a11) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_EVENT(LEVEL, EVENT), MSG, _a10, _a11) \
    WPP_LEVEL_EVENT_PRE(LEVEL, EVENT) \
    WPP_ANNOTATE(dyn_cpp184) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_EVENT_FILTER(LEVEL, EVENT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11)), \
            WPP_RECORDER_SF_dd( \
                WPP_RECORDER_LEVEL_EVENT_ARGS(LEVEL, EVENT), \
                12, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_EVENT_POST(LEVEL, EVENT)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_dyn_cpp184(LEVEL, EVENT, MSG, _a10, _a11) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_EVENT(LEVEL, EVENT), MSG, _a10, _a11) \
    WPP_LEVEL_EVENT_PRE(LEVEL, EVENT) \
    WPP_ANNOTATE(dyn_cpp184) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_EVENT_ENABLED(LEVEL, EVENT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10, _a11)), \
            WPP_SF_dd( \
                WPP_LEVEL_EVENT_LOGGER(LEVEL, EVENT) \
                12, \
                WPP_LOCAL_TraceGuids+0, _a10, _a11), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_EVENT_POST(LEVEL, EVENT)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_dyn_cpp213
#ifndef WPP_LEVEL_EVENT_PRE
#  define WPP_LEVEL_EVENT_PRE(LEVEL,EVENT)
#endif
#ifndef WPP_LEVEL_EVENT_POST
#  define WPP_LEVEL_EVENT_POST(LEVEL,EVENT)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dyn_cpp213(LEVEL, EVENT, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_EVENT(LEVEL, EVENT), MSG) \
    WPP_LEVEL_EVENT_PRE(LEVEL, EVENT) \
    do {\
        WPP_ANNOTATE(dyn_cpp213) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_EVENT_ENABLED(LEVEL, EVENT); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_EVENT_FILTER(LEVEL, EVENT); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_( \
                     WPP_LEVEL_EVENT_LOGGER(LEVEL, EVENT) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_EVENT_ARGS(LEVEL, EVENT), \
                     13, \
                     WPP_LOCAL_TraceGuids+0);\
        } \
    } \
    while(0) \
    WPP_LEVEL_EVENT_POST(LEVEL, EVENT)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dyn_cpp213(LEVEL, EVENT, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_EVENT(LEVEL, EVENT), MSG) \
    WPP_LEVEL_EVENT_PRE(LEVEL, EVENT) \
    WPP_ANNOTATE(dyn_cpp213) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_EVENT_FILTER(LEVEL, EVENT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_( \
                WPP_RECORDER_LEVEL_EVENT_ARGS(LEVEL, EVENT), \
                13, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_EVENT_POST(LEVEL, EVENT)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_dyn_cpp213(LEVEL, EVENT, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_EVENT(LEVEL, EVENT), MSG) \
    WPP_LEVEL_EVENT_PRE(LEVEL, EVENT) \
    WPP_ANNOTATE(dyn_cpp213) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_EVENT_ENABLED(LEVEL, EVENT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_( \
                WPP_LEVEL_EVENT_LOGGER(LEVEL, EVENT) \
                13, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_EVENT_POST(LEVEL, EVENT)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_dyn_cpp223
#ifndef WPP_LEVEL_EVENT_PRE
#  define WPP_LEVEL_EVENT_PRE(LEVEL,EVENT)
#endif
#ifndef WPP_LEVEL_EVENT_POST
#  define WPP_LEVEL_EVENT_POST(LEVEL,EVENT)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dyn_cpp223(LEVEL, EVENT, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_EVENT(LEVEL, EVENT), MSG, _a10) \
    WPP_LEVEL_EVENT_PRE(LEVEL, EVENT) \
    do {\
        WPP_ANNOTATE(dyn_cpp223) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_EVENT_ENABLED(LEVEL, EVENT); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_EVENT_FILTER(LEVEL, EVENT); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a10)); \
            WPP_RECORDER_AND_TRACE_SF_q( \
                     WPP_LEVEL_EVENT_LOGGER(LEVEL, EVENT) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_EVENT_ARGS(LEVEL, EVENT), \
                     14, \
                     WPP_LOCAL_TraceGuids+0, _a10);\
        } \
    } \
    while(0) \
    WPP_LEVEL_EVENT_POST(LEVEL, EVENT)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dyn_cpp223(LEVEL, EVENT, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_EVENT(LEVEL, EVENT), MSG, _a10) \
    WPP_LEVEL_EVENT_PRE(LEVEL, EVENT) \
    WPP_ANNOTATE(dyn_cpp223) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_EVENT_FILTER(LEVEL, EVENT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_RECORDER_SF_q( \
                WPP_RECORDER_LEVEL_EVENT_ARGS(LEVEL, EVENT), \
                14, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_EVENT_POST(LEVEL, EVENT)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_dyn_cpp223(LEVEL, EVENT, MSG, _a10) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_EVENT(LEVEL, EVENT), MSG, _a10) \
    WPP_LEVEL_EVENT_PRE(LEVEL, EVENT) \
    WPP_ANNOTATE(dyn_cpp223) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_EVENT_ENABLED(LEVEL, EVENT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a10)), \
            WPP_SF_q( \
                WPP_LEVEL_EVENT_LOGGER(LEVEL, EVENT) \
                14, \
                WPP_LOCAL_TraceGuids+0, _a10), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_EVENT_POST(LEVEL, EVENT)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_dyn_cpp238
#ifndef WPP_LEVEL_EVENT_PRE
#  define WPP_LEVEL_EVENT_PRE(LEVEL,EVENT)
#endif
#ifndef WPP_LEVEL_EVENT_POST
#  define WPP_LEVEL_EVENT_POST(LEVEL,EVENT)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dyn_cpp238(LEVEL, EVENT, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_EVENT(LEVEL, EVENT), MSG) \
    WPP_LEVEL_EVENT_PRE(LEVEL, EVENT) \
    do {\
        WPP_ANNOTATE(dyn_cpp238) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_EVENT_ENABLED(LEVEL, EVENT); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_EVENT_FILTER(LEVEL, EVENT); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_( \
                     WPP_LEVEL_EVENT_LOGGER(LEVEL, EVENT) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_EVENT_ARGS(LEVEL, EVENT), \
                     15, \
                     WPP_LOCAL_TraceGuids+0);\
        } \
    } \
    while(0) \
    WPP_LEVEL_EVENT_POST(LEVEL, EVENT)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dyn_cpp238(LEVEL, EVENT, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_EVENT(LEVEL, EVENT), MSG) \
    WPP_LEVEL_EVENT_PRE(LEVEL, EVENT) \
    WPP_ANNOTATE(dyn_cpp238) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_EVENT_FILTER(LEVEL, EVENT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_( \
                WPP_RECORDER_LEVEL_EVENT_ARGS(LEVEL, EVENT), \
                15, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_EVENT_POST(LEVEL, EVENT)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_dyn_cpp238(LEVEL, EVENT, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_EVENT(LEVEL, EVENT), MSG) \
    WPP_LEVEL_EVENT_PRE(LEVEL, EVENT) \
    WPP_ANNOTATE(dyn_cpp238) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_EVENT_ENABLED(LEVEL, EVENT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_( \
                WPP_LEVEL_EVENT_LOGGER(LEVEL, EVENT) \
                15, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_EVENT_POST(LEVEL, EVENT)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_dyn_cpp249
#ifndef WPP_LEVEL_EVENT_PRE
#  define WPP_LEVEL_EVENT_PRE(LEVEL,EVENT)
#endif
#ifndef WPP_LEVEL_EVENT_POST
#  define WPP_LEVEL_EVENT_POST(LEVEL,EVENT)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dyn_cpp249(LEVEL, EVENT, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_EVENT(LEVEL, EVENT), MSG) \
    WPP_LEVEL_EVENT_PRE(LEVEL, EVENT) \
    do {\
        WPP_ANNOTATE(dyn_cpp249) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_EVENT_ENABLED(LEVEL, EVENT); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_EVENT_FILTER(LEVEL, EVENT); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_( \
                     WPP_LEVEL_EVENT_LOGGER(LEVEL, EVENT) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_EVENT_ARGS(LEVEL, EVENT), \
                     16, \
                     WPP_LOCAL_TraceGuids+0);\
        } \
    } \
    while(0) \
    WPP_LEVEL_EVENT_POST(LEVEL, EVENT)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dyn_cpp249(LEVEL, EVENT, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_EVENT(LEVEL, EVENT), MSG) \
    WPP_LEVEL_EVENT_PRE(LEVEL, EVENT) \
    WPP_ANNOTATE(dyn_cpp249) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_EVENT_FILTER(LEVEL, EVENT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_( \
                WPP_RECORDER_LEVEL_EVENT_ARGS(LEVEL, EVENT), \
                16, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_EVENT_POST(LEVEL, EVENT)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_dyn_cpp249(LEVEL, EVENT, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_EVENT(LEVEL, EVENT), MSG) \
    WPP_LEVEL_EVENT_PRE(LEVEL, EVENT) \
    WPP_ANNOTATE(dyn_cpp249) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_EVENT_ENABLED(LEVEL, EVENT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_( \
                WPP_LEVEL_EVENT_LOGGER(LEVEL, EVENT) \
                16, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_EVENT_POST(LEVEL, EVENT)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_dyn_cpp262
#ifndef WPP_LEVEL_EVENT_PRE
#  define WPP_LEVEL_EVENT_PRE(LEVEL,EVENT)
#endif
#ifndef WPP_LEVEL_EVENT_POST
#  define WPP_LEVEL_EVENT_POST(LEVEL,EVENT)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dyn_cpp262(LEVEL, EVENT, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_EVENT(LEVEL, EVENT), MSG) \
    WPP_LEVEL_EVENT_PRE(LEVEL, EVENT) \
    do {\
        WPP_ANNOTATE(dyn_cpp262) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_EVENT_ENABLED(LEVEL, EVENT); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_EVENT_FILTER(LEVEL, EVENT); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_( \
                     WPP_LEVEL_EVENT_LOGGER(LEVEL, EVENT) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_EVENT_ARGS(LEVEL, EVENT), \
                     17, \
                     WPP_LOCAL_TraceGuids+0);\
        } \
    } \
    while(0) \
    WPP_LEVEL_EVENT_POST(LEVEL, EVENT)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dyn_cpp262(LEVEL, EVENT, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_EVENT(LEVEL, EVENT), MSG) \
    WPP_LEVEL_EVENT_PRE(LEVEL, EVENT) \
    WPP_ANNOTATE(dyn_cpp262) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_EVENT_FILTER(LEVEL, EVENT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_( \
                WPP_RECORDER_LEVEL_EVENT_ARGS(LEVEL, EVENT), \
                17, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_EVENT_POST(LEVEL, EVENT)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_dyn_cpp262(LEVEL, EVENT, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_EVENT(LEVEL, EVENT), MSG) \
    WPP_LEVEL_EVENT_PRE(LEVEL, EVENT) \
    WPP_ANNOTATE(dyn_cpp262) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_EVENT_ENABLED(LEVEL, EVENT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_( \
                WPP_LEVEL_EVENT_LOGGER(LEVEL, EVENT) \
                17, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_EVENT_POST(LEVEL, EVENT)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_dyn_cpp285
#ifndef WPP_LEVEL_EVENT_PRE
#  define WPP_LEVEL_EVENT_PRE(LEVEL,EVENT)
#endif
#ifndef WPP_LEVEL_EVENT_POST
#  define WPP_LEVEL_EVENT_POST(LEVEL,EVENT)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dyn_cpp285(LEVEL, EVENT, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_EVENT(LEVEL, EVENT), MSG) \
    WPP_LEVEL_EVENT_PRE(LEVEL, EVENT) \
    do {\
        WPP_ANNOTATE(dyn_cpp285) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_EVENT_ENABLED(LEVEL, EVENT); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_EVENT_FILTER(LEVEL, EVENT); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_( \
                     WPP_LEVEL_EVENT_LOGGER(LEVEL, EVENT) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_EVENT_ARGS(LEVEL, EVENT), \
                     18, \
                     WPP_LOCAL_TraceGuids+0);\
        } \
    } \
    while(0) \
    WPP_LEVEL_EVENT_POST(LEVEL, EVENT)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dyn_cpp285(LEVEL, EVENT, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_EVENT(LEVEL, EVENT), MSG) \
    WPP_LEVEL_EVENT_PRE(LEVEL, EVENT) \
    WPP_ANNOTATE(dyn_cpp285) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_EVENT_FILTER(LEVEL, EVENT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_( \
                WPP_RECORDER_LEVEL_EVENT_ARGS(LEVEL, EVENT), \
                18, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_EVENT_POST(LEVEL, EVENT)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_dyn_cpp285(LEVEL, EVENT, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_EVENT(LEVEL, EVENT), MSG) \
    WPP_LEVEL_EVENT_PRE(LEVEL, EVENT) \
    WPP_ANNOTATE(dyn_cpp285) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_EVENT_ENABLED(LEVEL, EVENT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_( \
                WPP_LEVEL_EVENT_LOGGER(LEVEL, EVENT) \
                18, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_EVENT_POST(LEVEL, EVENT)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_dyn_cpp296
#ifndef WPP_LEVEL_EVENT_PRE
#  define WPP_LEVEL_EVENT_PRE(LEVEL,EVENT)
#endif
#ifndef WPP_LEVEL_EVENT_POST
#  define WPP_LEVEL_EVENT_POST(LEVEL,EVENT)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dyn_cpp296(LEVEL, EVENT, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_EVENT(LEVEL, EVENT), MSG) \
    WPP_LEVEL_EVENT_PRE(LEVEL, EVENT) \
    do {\
        WPP_ANNOTATE(dyn_cpp296) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_EVENT_ENABLED(LEVEL, EVENT); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_EVENT_FILTER(LEVEL, EVENT); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_( \
                     WPP_LEVEL_EVENT_LOGGER(LEVEL, EVENT) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_EVENT_ARGS(LEVEL, EVENT), \
                     19, \
                     WPP_LOCAL_TraceGuids+0);\
        } \
    } \
    while(0) \
    WPP_LEVEL_EVENT_POST(LEVEL, EVENT)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_dyn_cpp296(LEVEL, EVENT, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_EVENT(LEVEL, EVENT), MSG) \
    WPP_LEVEL_EVENT_PRE(LEVEL, EVENT) \
    WPP_ANNOTATE(dyn_cpp296) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_EVENT_FILTER(LEVEL, EVENT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_( \
                WPP_RECORDER_LEVEL_EVENT_ARGS(LEVEL, EVENT), \
                19, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_EVENT_POST(LEVEL, EVENT)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_dyn_cpp296(LEVEL, EVENT, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_EVENT(LEVEL, EVENT), MSG) \
    WPP_LEVEL_EVENT_PRE(LEVEL, EVENT) \
    WPP_ANNOTATE(dyn_cpp296) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_EVENT_ENABLED(LEVEL, EVENT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_( \
                WPP_LEVEL_EVENT_LOGGER(LEVEL, EVENT) \
                19, \
                WPP_LOCAL_TraceGuids+0), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_EVENT_POST(LEVEL, EVENT)
#endif // ENABLE_WPP_RECORDER

// Functions
#undef DoDebugTrace
#define DoDebugTrace WPP_(CALL)
#undef DoTraceMessage
#define DoTraceMessage WPP_(CALL)
#undef WppTracePrint
#define WppTracePrint WPP_(CALL)

#ifdef __cplusplus
} // extern "C"
#endif

